# -*- coding: utf-8 -*-
"""travel_planner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iEVA81sYVEOEVArc0mkIsQXAOtNBwbX8
"""

#!pip install langchain langchain_core langchain_groq langchain_community langchain langgraph

import http.client
import streamlit as st
import urllib.parse
import json
import http.client
import urllib.parse
import json
from typing import TypedDict, Annotated, List
from langgraph.graph import StateGraph, END
from langchain_core.messages import HumanMessage, AIMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables.graph import MermaidDrawMethod
from IPython.display import Image


class PlannerState(TypedDict):
  messages : Annotated[List[HumanMessage | AIMessage], "the messages in the conversation"]
  city: str
  days: int
  interests: List[str]
  itinerary: str

from langchain_groq import ChatGroq
llm = ChatGroq(
    temperature = 0,
    groq_api_key = #YOUR API KEY,
    model_name = "llama-3.3-70b-versatile"
)


itinerary_prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful travel assistant. Create a {days}-day trip itinerary for {city} based on the user's interests: {interests}. Provide a brief, bulleted itinerary."),
    ("human", "Create an itinerary for my trip."),
])

def input_city(state: PlannerState) -> PlannerState:
    #print("Please enter the city you want to visit for your day trip: ")
    #user_message = input("Your Input: ")
    #return {**state, "city": user_message, "messages": state['messages'] + [HumanMessage(content=user_message)]}
    return state
def input_days(state: PlannerState) -> PlannerState:
    '''print(f"Please enter the number of days you want to spend in {state['city']}: ")
    while True:
        try:
            user_message = input("Your Input: ")
            days = int(user_message)
            if days > 0:
                break
            else:
                print("Please enter a positive number of days.")
        except ValueError:
            print("Invalid input. Please enter a number.")
    return {**state, "days": days, "messages": state['messages'] + [HumanMessage(content=user_message)]}'''
    return state

def input_interest(state: PlannerState) -> PlannerState:
    '''print(f"Please enter your interest for the trip to {state['city']} (comma-separated): ")
    user_message = input("Your Input: ")
    return {**state, "interests": [interest.strip() for interest in user_message.split(",")], "messages": state['messages'] + [HumanMessage(content=user_message)]}'''
    return state
def create_itinerary(state: PlannerState) -> PlannerState:
    print(f"Creating a detailed {state['days']}-day itinerary for {state['city']} based on interests: {', '.join(state['interests'])}")

    detailed_prompt = ChatPromptTemplate.from_messages([
        ("system", "You are a travel planner. Create a detailed {days}-day trip itinerary for {city} based on these interests: {interests}. Include time slots for each activity, meal suggestions, and a balance of sightseeing, rest, and local experiences. Format the itinerary as follows: Day-wise with detailed time slots and activity descriptions."),
        ("human", "Create a detailed itinerary for my trip."),
    ])

    response = llm.invoke(detailed_prompt.format_messages(
        city=state['city'],
        interests=', '.join(state['interests']),
        days=state['days']
    ))

    print("\nFinal Itinerary:")
    print(response.content)
    return {
        **state,
        "messages": state['messages'] + [AIMessage(content=response.content)],
        "itinerary": response.content,
    }


workflow = StateGraph(PlannerState)
workflow.add_node("input_city", input_city)
workflow.add_node("input_days", input_days)
workflow.add_node("input_interest", input_interest)
workflow.add_node("create_itinerary", create_itinerary)

workflow.set_entry_point("input_city")
workflow.add_edge("input_city", "input_days")
workflow.add_edge("input_days", "input_interest")
workflow.add_edge("input_interest", "create_itinerary")
workflow.add_edge("create_itinerary", END)

app = workflow.compile()

#display(Image(app.get_graph().draw_mermaid_png(draw_method=MermaidDrawMethod.API)))




def travel_planner(user_request: str):
    print(f"Initial Request: {user_request}\n")
    state = {
        "messages": [HumanMessage(content=user_request)],
        "city": "",
        "days": 1,
        "interests": [],
        "itinerary": "",
    }
    for output in app.stream(state):
        pass





# API connection setup
def get_connection():
    conn = http.client.HTTPSConnection("tripadvisor-scraper.p.rapidapi.com")
    headers = {
        'x-rapidapi-key': # YOUR API KEY,
        'x-rapidapi-host': # USE TRIP ADVISOR SCRAPPER FROM RAPID API
    }
    return conn, headers


# Search hotels by location
def search_hotels(location):
    conn, headers = get_connection()
    encoded_location = urllib.parse.quote(location)
    conn.request("GET", f"/hotels/search?query={encoded_location}", headers=headers)
    res = conn.getresponse()
    data = res.read().decode("utf-8")

    try:
        hotels = json.loads(data)
        return hotels
    except json.JSONDecodeError:
        print("❌ Failed to parse hotel search response.")
        return []


# List hotels with IDs
def list_hotels_by_id(query_id):
    conn, headers = get_connection()
    conn.request("GET", f"/hotels/list?query={query_id}&page=1", headers=headers)
    res = conn.getresponse()
    data = res.read().decode("utf-8")

    try:
        hotel_list = json.loads(data)
        return hotel_list
    except json.JSONDecodeError:
        print("❌ Failed to parse hotel list response.")
        return []


# Get hotel details by ID
def get_hotel_details(hotel_id):
    conn, headers = get_connection()
    conn.request("GET", f"/hotels/detail?id={hotel_id}", headers=headers)
    res = conn.getresponse()
    data = res.read().decode("utf-8")

    try:
        details = json.loads(data)
        return details
    except json.JSONDecodeError:
        print("❌ Failed to parse hotel details response.")
        return {}

import json

def print_hotel_details(hotel_data):
    # Check if the API response indicates an error
    if 'status' in hotel_data and hotel_data['status'] != 200:
        print(f"❌ API Error: Status {hotel_data['status']}, Message: {hotel_data.get('message', 'N/A')}")
        return  # Exit the function if there's an error

    print("🏨 Hotel Details:")
    print(f"Name: {hotel_data.get('name', 'N/A')}") # Use get() to safely access keys
    print(f"ID: {hotel_data.get('id', 'N/A')}")
    print(f"Rating: {hotel_data.get('rating', 'N/A')} ⭐ ({hotel_data.get('reviews', 'N/A')} reviews)")
    print(f"Address: {hotel_data.get('address', 'N/A')}")
    print(f"Phone: {hotel_data.get('phone', 'N/A')}")
    print(f"Email: {hotel_data.get('email', 'N/A')}")
    print(f"Website: {hotel_data.get('website', 'N/A')}")
    print(f"TripAdvisor Link: {hotel_data.get('link', 'N/A')}")
    latitude = hotel_data.get('latitude', 'N/A')
    longitude = hotel_data.get('longitude', 'N/A')

    if latitude != 'N/A' and longitude != 'N/A':
        map_url = f"https://www.google.com/maps?q={latitude},{longitude}&output=embed"
        html_code = f"""
        <iframe
            width="500"
            height="500"
            frameborder="0"
            style="border:0"
            src="{map_url}"
            allowfullscreen>
        </iframe>
        """
        print(html_code)
    else:
        print("Location: 📍 N/A")

    ranking = hotel_data.get('ranking', {}) # Safely access nested keys
    print("\n🏅 Ranking:")
    print(f"Current Rank: {ranking.get('current_rank', 'N/A')} out of {ranking.get('total', 'N/A')} hotels")

    reviews_per_rating = hotel_data.get('reviews_per_rating', {}) # Safely access nested keys
    print("\n📝 Reviews Breakdown:")
    for rating, count in reviews_per_rating.items():
        print(f"{rating} stars: {count} reviews")

    review_keywords = hotel_data.get('review_keywords', []) # Safely access nested keys
    print("\n🔑 Popular Keywords:")
    keywords = ', '.join(review_keywords[:10])
    print(f"{keywords}...")

    print(f"\n🖼️ Featured Image: {hotel_data.get('featured_image', 'N/A')}")

